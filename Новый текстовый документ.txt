internal class Train 

    { 

        // Свойства для номера поезда, станции назначения и времени отправления. 

        public int TrainNumber { get; set; } 

        public string DestinationStation { get; set; } 

        public DateTime DepartureTime { get; set; } 

 

        // Конструктор класса для инициализации свойств поезда. 

        public Train(int trainNumber, string destinationStation, DateTime departureTime) 

        { 

            TrainNumber = trainNumber; 

            DestinationStation = destinationStation; 

            DepartureTime = departureTime; 

        } 

 

        // Переопределение метода ToString для вывода информации о поезде. 

        public override string ToString() 

        { 

            return $"Поезд {TrainNumber}, станция назначения: {DestinationStation}, время отправления: {DepartureTime}"; 

        } 

    } 

 

} 

 

    internal class TrainSchedule 

    { 

        // Приватное поле для хранения списка поездов. 

        private List<Train> trains = new List<Train>(); 

 

        // Метод для добавления поезда в начало списка. 

        public void AddTrainAtBeginning(Train train) 

        { 

            trains.Insert(0, train); 

        } 

        // Метод для добавления поезда в конец списка. 

        public void AddTrainAtEnd(Train train) 

        { 

            trains.Add(train); 

        } 

        // Метод для добавления поезда перед определенным поездом. 

        public void AddTrainBefore(int trainNumber, Train train) 

        { 

            // Поиск индекса поезда по его номеру. 

            int index = trains.FindIndex(t => t.TrainNumber == trainNumber); 

            // Если поезд найден, вставить новый поезд перед ним. 

            if (index >= 0) 

                trains.Insert(index, train); 

            else 

                Console.WriteLine("Поезд с таким номером не найден."); 

        } 

        // Метод для добавления поезда после определенного поезда. 

        public void AddTrainAfter(int trainNumber, Train train) 

        { 

            // Поиск индекса поезда по его номеру. 

            int index = trains.FindIndex(t => t.TrainNumber == trainNumber); 

            if (index >= 0) 

                trains.Insert(index + 1, train); 

            else 

                Console.WriteLine("Поезд с таким номером не найден."); 

        } 

        // Метод для удаления поезда по его номеру. 

        public void RemoveTrain(int trainNumber) 

        { 

            // Поиск поезда по его номеру. 

            Train trainToRemove = trains.Find(train => train.TrainNumber == trainNumber); 

            if (trainToRemove != null) 

                trains.Remove(trainToRemove); 

            else 

                Console.WriteLine("Поезд с таким номером не найден."); 

        } 

        // Метод для вывода всего списка поездов. 

        public void PrintTrainSchedule() 

        { 

            Console.WriteLine("Информация о поездах дальнего следования:"); 

            foreach (var train in trains) 

            { 

                Console.WriteLine(train); 

            } 

        } 

        // Метод для получения информации о поезде по его номеру. 

        public Train GetTrainByNumber(int trainNumber) 

        { 

            return trains.Find(train => train.TrainNumber == trainNumber); 

        } 

        // Метод для получения списка поездов по станции назначения. 

        public List<Train> GetTrainsByDestination(string destinationStation) 

        { 

            return trains.FindAll(train => train.DestinationStation == destinationStation); 

        } 

        // Метод для сортировки списка поездов по станции назначения. 

        public void SortByDestination() 

        { 

            trains.Sort((x, y) => string.Compare(x.DestinationStation, y.DestinationStation)); 

        } 

    } 

} 

 

    internal class Program 

    { 

        static void Main(string[] args) 

        { 

            // Создание объекта расписания поездов. 

            TrainSchedule trainSchedule = new TrainSchedule(); 

            // Флаг для выхода из цикла. 

            bool exit = false; 

 

            // Основной цикл программы. 

            while (!exit) 

            { 

                Console.WriteLine("Добро пожаловать на автовокзал!"); 

                Console.WriteLine("\nМеню:"); 

                Console.WriteLine("1. Добавить информацию об отправлении поезда в начало списка"); 

                Console.WriteLine("2. Добавить информацию об отправлении поезда в конец списка"); 

                Console.WriteLine("3. Добавить информацию об отправлении поезда перед определенным поездом"); 

                Console.WriteLine("4. Добавить информацию об отправлении поезда после определенного поезда"); 

                Console.WriteLine("5. Удалить выбранный поезд"); 

                Console.WriteLine("6. Вывести весь список"); 

                Console.WriteLine("7. Выйти из программы"); 

 

                Console.Write("\nВведите номер выбранного пункта меню: "); 

                var choice = int.Parse(Console.ReadLine()); 

 

                // Обработка выбора пользователя. 

                switch (choice) 

                { 

                    case 1: 

                        // Добавление поезда в начало списка. 

                        Console.Write("Введите номер поезда: "); 

                        int trainNumber1 = int.Parse(Console.ReadLine()); 

                        Console.Write("Введите станцию назначения: "); 

                        string destinationStation1 = Console.ReadLine(); 

                        Console.Write("Введите время отправления (гггг-мм-дд чч:мм:сс): "); 

                        DateTime departureTime1 = DateTime.Parse(Console.ReadLine()); 

                        trainSchedule.AddTrainAtBeginning(new Train(trainNumber1, destinationStation1, departureTime1)); 

                        break; 

                    case 2: 

                        // Добавление поезда в конец списка. 

                        Console.Write("Введите номер поезда: "); 

                        int trainNumber2 = int.Parse(Console.ReadLine()); 

                        Console.Write("Введите станцию назначения: "); 

                        string destinationStation2 = Console.ReadLine(); 

                        Console.Write("Введите время отправления (гггг-мм-дд чч:мм:сс): "); 

                        DateTime departureTime2 = DateTime.Parse(Console.ReadLine()); 

                        trainSchedule.AddTrainAtEnd(new Train(trainNumber2, destinationStation2, departureTime2)); 

                        break; 

                    case 3: 

                        // Добавление поезда перед определенным поездом. 

                        Console.Write("Введите номер поезда, перед которым нужно добавить новый поезд: "); 

                        int trainNumberBefore = int.Parse(Console.ReadLine()); 

                        Console.Write("Введите номер нового поезда: "); 

                        int newTrainNumberBefore = int.Parse(Console.ReadLine()); 

                        Console.Write("Введите станцию назначения нового поезда: "); 

                        string newDestinationStationBefore = Console.ReadLine(); 

                        Console.Write("Введите время отправления нового поезда (гггг-мм-дд чч:мм:сс): "); 

                        DateTime newDepartureTimeBefore = DateTime.Parse(Console.ReadLine()); 

                        trainSchedule.AddTrainBefore(trainNumberBefore, new Train(newTrainNumberBefore, newDestinationStationBefore, newDepartureTimeBefore)); 

                        break; 

                    case 4: 

                        // Добавление поезда после определенного поезда. 

                        Console.Write("Введите номер поезда, после которого нужно добавить новый поезд: "); 

                        int trainNumberAfter = int.Parse(Console.ReadLine()); 

                        Console.Write("Введите номер нового поезда: "); 

                        int newTrainNumberAfter = int.Parse(Console.ReadLine()); 

                        Console.Write("Введите станцию назначения нового поезда: "); 

                        string newDestinationStationAfter = Console.ReadLine(); 

                        Console.Write("Введите время отправления нового поезда (гггг-мм-дд чч:мм:сс): "); 

                        DateTime newDepartureTimeAfter = DateTime.Parse(Console.ReadLine()); 

                        trainSchedule.AddTrainAfter(trainNumberAfter, new Train(newTrainNumberAfter, newDestinationStationAfter, newDepartureTimeAfter)); 

                        break; 

                    case 5: 

                        // Удаление выбранного поезда. 

                        Console.Write("Введите номер поезда для удаления: "); 

                        int trainNumberToRemove = int.Parse(Console.ReadLine()); 

                        trainSchedule.RemoveTrain(trainNumberToRemove); 

                        break; 

                    case 6: 

                        // Вывод всего списка поездов. 

                        trainSchedule.PrintTrainSchedule(); 

                        break; 

                    case 7: 

                        // Выход из программы. 

                        exit = true; 

                        break; 

                    default: 

                        Console.WriteLine("Неверный ввод. Попробуйте еще раз."); 

                        break; 

                } 

                Console.ReadKey(); 

            } 

        } 

    } 

} 